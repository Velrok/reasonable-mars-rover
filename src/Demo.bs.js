// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Readline = require("bs-readline/src/Readline.js");

var linesRead = /* record */[/* contents */0];

function nextReaderState(rs) {
  if (rs !== 1) {
    return /* ReadRoverDef */1;
  } else {
    return /* ReadRoverCommands */2;
  }
}

function parseLine(readerState, line) {
  switch (readerState) {
    case 0 : 
        return /* World */Block.__(0, [/* record */[
                    /* width */6,
                    /* height */5
                  ]]);
    case 1 : 
        return /* Rover */Block.__(1, [/* record */[
                    /* x */1,
                    /* y */1,
                    /* direction : N */0
                  ]]);
    case 2 : 
        return /* InstructionSeq */Block.__(2, [/* array */[/* L */0]]);
    
  }
}

function processInstructions(w, r, i) {
  console.log("processing rover");
  return /* () */0;
}

var myReaderState = /* record */[/* contents : ReadWorldDef */0];

var myWorld = /* record */[/* contents : record */[
    /* width */0,
    /* height */0
  ]];

var currentRover = /* record */[/* contents : record */[
    /* x */0,
    /* y */0,
    /* direction : N */0
  ]];

Readline.readline((function (line) {
        var match = parseLine(myReaderState[0], line);
        switch (match.tag | 0) {
          case 0 : 
              myWorld[0] = match[0];
              break;
          case 1 : 
              currentRover[0] = match[0];
              break;
          case 2 : 
              console.log("processing rover");
              break;
          
        }
        myReaderState[0] = nextReaderState(myReaderState[0]);
        return /* () */0;
      }));

exports.linesRead = linesRead;
exports.nextReaderState = nextReaderState;
exports.parseLine = parseLine;
exports.processInstructions = processInstructions;
exports.myReaderState = myReaderState;
exports.myWorld = myWorld;
exports.currentRover = currentRover;
/*  Not a pure module */
